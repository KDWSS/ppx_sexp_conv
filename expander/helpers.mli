open! Base
open! Ppxlib

(** Constructs a branch of a [match] or [function] expression with no guard. *)
val ( --> ) : pattern -> expression -> case

(** Replace all type variables like ['a] with wildcard ([_]) types. *)
val replace_variables_by_underscores : core_type -> core_type

(** Create a binding for a derived function, adding a type annotation if required. *)
val constrained_function_binding
  :  location (** location to use for the binding *)
  -> type_declaration (** type declaration used to derive the function *)
  -> core_type (** type of the function *)
  -> tps:string loc list (** names of type parameters in the declaration *)
  -> func_name:string (** name to bind the function to *)
  -> expression (** expression representing the function *)
  -> value_binding

(** Shadows [Ppxlib.Ast_builder.Default.pexp_match] with a version that does some extra
    simplifications. In general these simplifications can change the meaning of an
    expression, but for code generated by [ppx_sexp_conv] they are desirable. *)
val pexp_match : loc:location -> expression -> cases -> expression

(** Shadows [Ppxlib.really_recursive] with a version that respects the [[@opaque]]
    attribute. *)
val really_recursive : rec_flag -> type_declaration list -> rec_flag
